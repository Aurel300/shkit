#!/bin/bash

# nuhx
#   by Aurel Bílý (2015-17)
#   https://github.com/Aurel300/shkit
#   see LICENSE file

# $cpmacros
#   class path (or other) macros for make.hxml files
cpmacros="--macro addClassPath('/DevProjects/Libs/hx2')\n"

function usage(){
    printf -- "nuhx: create new haxe project / class here\n"
    printf -- "by Aurel Bílý (https://github.com/Aurel300/shkit)"
    printf -- "usage:\n"
    printf -- "  nuhx [e]neko <projname>\n"
    printf -- "  nuhx js <projname>\n"
    printf -- "  nuhx flash <projname>[ <w>[ <h>[ <fps>]]]\n"
    printf -- "  nuhx ludum <projname>[ <w>[ <h>[ <fps>]]]\n"
    printf -- "\n"
    printf -- "    eneko, neko, js, flash, ludum\n"
    printf -- "      type of project\n"
    printf -- "      eneko is an auto-exec neko (runs automatically after a build)\n"
    printf -- "      ludum flash projects create a bootstrap directory structure\n"
    printf -- "    <projname>\n"
    printf -- "      name of project and output files\n"
    printf -- "    <w>, <h>, <fps>\n"
    printf -- "      width, height and fps of a flash project\n"
    printf -- "      (defaults: 640x480, 60 fps)\n"
    printf -- "\n"
    printf -- "  nuhx cl <class>[ <extends>]\n"
    printf -- "    creates an empty .hx class\n"
    printf -- "    the package is traced up the directory structure\n"
    printf -- "    until a make.hxml file is encountered\n"
    printf -- "\n"
    printf -- "    <class>\n"
    printf -- "      name of module\n"
    printf -- "    <extends>\n"
    printf -- "      name of module to extend, doesn't add imports!\n"
    printf -- "\n"
    printf -- "  nuhx -o <option>\n"
    printf -- "    opens the created file(s)\n"
    exit
}

# $opt_open
#   set with the -o switch
#   opens the newly-created files
opt_open=0
if [[ "$1" == "-o" ]]; then
    opt_open=1
    shift
fi

# less than two arguments
#   show usage
if [[ $# -lt 2 ]]; then
    usage
fi

# $mfpath
#   main file path
#   directory 
mfpath=`pwd`
if [[ ${mfpath:$((${#a}-1))} != "/" ]]; then
    mfpath+="/"
fi

if [[ ! -w "$mfpath" ]]; then
    printf -- "! error: Cannot write in the current directory\n"
    exit
fi

# 'cl' project
#   creates a .hx class
if [[ "$1" == "cl" ]]; then
    # $libpath
    #   library path
    #   this is where the class file will be put
    libpath="${mfpath}${2}.hx"
    if [[ -f "$libpath" ]]; then
        printf -- "! error: lib file already exists\n"
        exit
    fi
    
    # $pack
    #   1 if a package should be specified
    #   0 otherwise
    pack=0
    
    # $mfound
    #   1 if make.hxml was found
    #   0 otherwise
    mfound=0
    
    # $cpath
    #   current path, used in the loop
    cpath="$mfpath"
    
    # $path
    #   an array of path components
    #   the size of this array is used in the loops
    IFS="/" read -ra path <<< "${mfpath:1}"
    for i in $(seq $((${#path[@]} - 1)) 0); do
        if [[ -f "${cpath}/make.hxml" ]]; then
            mfound=1
            break
        fi
        pack=1
        cpath=`dirname "$cpath"`
    done
    
    # $ppath
    #   package path, a dot-separated string
    #   of path components
    ppath=""
    for ci in $(seq $(($i + 1)) $((${#path[@]} - 1))); do
        ppath+=".${path[${ci}]}"
    done
    ppath="${ppath:1}"
    
    if [[ $mfound -eq 1 ]]; then
        printf -- "make.hxml located at ${cpath}\n"
    else
        printf -- "no make.hxml was found\n"
    fi
    printf -- "creating class file ${2}.hx at\n"
    printf -- "    ${mfpath}\n"
    
    # $ext
    #   the string for extension, if this class extends another
    ext=""
    if [[ $# -gt 2 ]]; then
        ext=" extends ${3}"
        printf -- "    ( extends ${3} )\n"
    fi
    
    if [[ $pack -eq 1 ]]; then
        printf -- "    ( package ${ppath} )\n"
        printf -- "package ${ppath};\n\nclass ${2}${ext} {\n\t\n}" > "$libpath"
    else
        printf -- "    ( no package )\n"
        printf -- "class ${2}${ext} {\n\t\n}" > "$libpath"
    fi
    
    if [[ $opt_open -eq 1 ]]; then
        printf -- "    ( opening )\n"
        open "$libpath"
    fi
    exit
fi

# regular projects
#   with a make.hxml and Main.hx file

# $mkpath
#   make.hxml path
mkpath="${mfpath}make.hxml"

# $mapath
#   Main.hx path
mapath="${mfpath}Main.hx"

if [[ -f "$mkpath" ]]; then
    printf -- "! error: make file already exists\n"
    exit
fi
if [[ -f "$mapath" ]]; then
    printf -- "! error: Main file already exists\n"
    exit
fi

printf -- "class Main {\n\tpublic static function main(){\n\t\t\n\t}\n}" > "$mapath"
printf -- "${cpmacros}-main Main.hx\n" > "$mkpath"
if [[ "$1" == "eneko" ]]; then
    printf -- "creating an auto-exec neko project at\n"
    printf -- "    ${mfpath}\n"
    printf -- "-x ${2}" >> "$mkpath"
    if [[ $opt_open -eq 1 ]]; then
        printf -- "    ( opening )"
        open "$mapath"
    fi
elif [[ "$1" == "neko" ]]; then
    printf -- "creating a neko project at\n"
    printf -- "    ${mfpath}\n"
    printf -- "-neko ${2}.n" >> "$mkpath"
    if [[ $opt_open -eq 1 ]]; then
        printf -- "    ( opening )"
        open "$mapath"
    fi
elif [[ "$1" == "js" ]]; then
    printf -- "creating a js project at\n"
    printf -- "    ${mfpath}\n"
    printf -- "-js ${2}.js" >> "$mkpath"
    if [[ $opt_open -eq 1 ]]; then
        printf -- "    ( opening )"
        open "$mapath"
    fi
elif [[ "$1" == "flash" || "$1" == "ludum" ]]; then
    if [[ "$1" == "flash" ]]; then
        printf -- "creating a flash project at\n"
    else
        printf -- "creating an LD flash project at\n"
    fi
    printf -- "    ${mfpath}\n"
    
    # $sw, $sh, $sf
    #   width, height, framerate
    #   of flash project
    sw=640
    sh=480
    sf=30
    if [[ $# -gt 2 ]]; then
        sw="$3"
        if [[ $# -gt 3 ]]; then
            sh="$4"
            if [[ $# -gt 4 ]]; then
                sf="$5"
            fi
        fi
    fi
    
    printf -- "-swf-header ${sw}:${sh}:${sf}:000000\n-swf ${2}.swf" >> "$mkpath"
    if [[ "$1" == "ludum" ]]; then
        mkdir "${mfpath}assets"
        mkdir "${mfpath}game"
        touch "${mfpath}TODO.txt"
    fi
    
    if [[ $opt_open -eq 1 ]]; then
        printf -- "    ( opening )\n"
        open "$mapath"
    fi
else
    rm "$mapath"
    rm "$mkpath"
    printf -- "! error: unknown project type\n"
    printf -- "\n"
    usage
fi
